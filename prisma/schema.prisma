// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model section {
  ID            Int                  @id @default(autoincrement())
  code          String               @unique @map("code") @db.VarChar(255)
  name          String               @map("name") @db.VarChar(255)
  isActive      IsActive             @default(YES) @map("is_active")
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  deletedAt     DateTime?            @map("deleted_at")
  subdistrictID Int?                 @map("subdistrict_id") @db.UnsignedInt
  subdistrict   locationSubdistrict? @relation(name: "locationSubdistrictTosection", fields: [subdistrictID], references: [subdistrictID], onDelete: Restrict, onUpdate: Restrict)
}

model locationSubdistrict {
  subdistrictID Int              @id @default(autoincrement()) @map("subdistrict_id") @db.UnsignedInt
  section       section[]        @relation(name: "locationSubdistrictTosection")
  districtID    Int              @map("district_id") @db.UnsignedInt
  zipcode       String           @map("zip_code") @db.VarChar(5)
  nameTH        String           @map("name_th") @db.VarChar(255)
  nameEN        String?          @map("name_en") @db.VarChar(255)
  district      locationDistrict @relation(name: "locationDistrictTolocationSubdistrict", fields: [districtID], references: [districtID], onDelete: Cascade, onUpdate: Cascade)

  @@map("location_subdistrict")
}

model locationGeography {
  geographyID Int                @id @default(autoincrement()) @map("geography_id") @db.UnsignedInt
  nameTH      String             @map("name_th") @db.VarChar(255)
  nameEN      String?            @map("name_en") @db.VarChar(255)
  province    locationProvince[] @relation(name: "locationGeographyTolocationProvince")

  @@map("location_geography")
}

model locationProvince {
  provinceID  Int                @id @default(autoincrement()) @map("province_id") @db.UnsignedInt
  geographyID Int                @map("geography_id") @db.UnsignedInt
  code        String             @map("code") @db.VarChar(10)
  nameTH      String             @map("name_th") @db.VarChar(255)
  nameEN      String?            @map("name_en") @db.VarChar(255)
  geography   locationGeography  @relation(name: "locationGeographyTolocationProvince", fields: [geographyID], references: [geographyID], onDelete: Cascade, onUpdate: Cascade)
  district    locationDistrict[] @relation(name: "locationDistrictTolocationProvince")

  @@map("location_province")
}

model locationDistrict {
  districtID  Int                   @id @default(autoincrement()) @map("district_id") @db.UnsignedInt
  provinceID  Int                   @map("province_id") @db.UnsignedInt
  code        String                @map("code") @db.VarChar(10)
  nameTH      String                @map("name_th") @db.VarChar(255)
  nameEN      String?               @map("name_en") @db.VarChar(255)
  province    locationProvince      @relation(name: "locationDistrictTolocationProvince", fields: [provinceID], references: [provinceID], onDelete: Cascade, onUpdate: Cascade)
  subdistrict locationSubdistrict[] @relation(name: "locationDistrictTolocationSubdistrict")

  @@map("location_district")
}

model sectionClient {
  ID           Int       @id @default(autoincrement()) @map("geography_id") @db.UnsignedInt
  clientID     String    @unique @default(uuid()) @map("client_id")
  clientSecret String    @map("client_secret") @db.Text
  nameTH       String?   @map("name_th") @db.VarChar(255)
  nameEN       String?   @map("name_en") @db.VarChar(255)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  @@map("section_client")
}

enum IsActive {
  NO  @map("0")
  YES @map("1")
}
